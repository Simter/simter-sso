import java.text.SimpleDateFormat
description = "Simter SSO"

// 所有项目的配置
allprojects {
    group = "org.simter"

    ext {
        // 依赖包的版本
        groovyVersion = "2.4.0"
        slf4jVersion = "1.7.7"
        logbackVersion = "1.1.2"
        springVersion = "4.1.4.RELEASE"
        junitVersion = "4.12"
        servletVersion = "3.1.0"
    }

    // 加载本地开发的一些特殊属性变量：如定义 nexus 的仓库地址
    def localConfigFile = file('local.properties')
    if (localConfigFile.exists()) {
        def props = new Properties()
        localConfigFile.withInputStream { stream -> props.load(stream) }
        props.each {key, value -> 
             ext[key] = value
        }
    }

    // 仓库配置
    repositories {
        mavenLocal()

        // nexus 仓库
        if (project.hasProperty('nexusUrl')) {
            maven {url nexusUrl} 
        } else {
            println 'build.gradle.allprojects.repositories: property nexusUrl is optional'
        }

        jcenter()
        mavenCentral()
    }
}

// 所有子项目的配置
subprojects {
    apply plugin: "java"
    apply plugin: "maven"

    // 编译配置
    compileJava{
        options.encoding = "UTF-8"
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }
    compileTestJava{
        options.encoding = "UTF-8"
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    // 全局的包依赖
    configurations {
        // 排除的 jar
        compile.exclude module: "commons-logging"
        compile.exclude module: "log4j"
    }
    dependencies {
        // log
        compile "org.slf4j:slf4j-api:${slf4jVersion}"

        // test
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testRuntime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        testRuntime "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
        testRuntime "ch.qos.logback:logback-classic:${logbackVersion}"
        testRuntime "org.codehaus.groovy:groovy:${groovyVersion}"
    }

    // 初始化项目目录结构
    task initDirs << {
        // jar project
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs()}

        // war project
        if (project.plugins.hasPlugin("war")){
          def webAppDir = file("$webAppDirName")
          webAppDir.mkdirs()
        }
    }
}

project(":simter-sso-client") {
    description = "Simter SSO Client"
    jar {
        manifest.attributes["Created-Time"] = "${buildTime()}"
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.description
        manifest.attributes["Implementation-Version"] = project.version
    }
}

project(":simter-sso-server"){
    description = "Simter SSO Server"
    jar {
        manifest.attributes["Created-Time"] = "${buildTime()}"
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.description
        manifest.attributes["Implementation-Version"] = project.version
    }
}

project(":simter-sso-server-demo"){
    description = "Simter SSO Server Demo"
    apply plugin: "war"
    apply from: "${rootDir}/gretty.plugin"
    war {
        manifest.attributes["Created-Time"] = "${buildTime()}"
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.description
        manifest.attributes["Implementation-Version"] = project.version
    }
}

// 获取当前时间
def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    //df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}